"""
최종 분석 엔진

전체 질문 결과를 바탕으로 종합적인 T/F 성향 분석과 F 성향 상대 대응법을 제공합니다.
"""

import re
from typing import Dict, List

# 상대 임포트 대신 절대 임포트 사용
try:
    from mbti_analyzer.models.schemas import FinalAnalysisResponse
except ImportError:
    # 로컬 테스트를 위한 대체 임포트
    import sys
    import os
    sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
    from models.schemas import FinalAnalysisResponse


def generate_final_analysis(results: List[Dict]) -> FinalAnalysisResponse:
    """
    전체 질문 결과를 바탕으로 종합적인 T/F 성향 분석과 F 성향 상대 대응법을 제공합니다.
    """
    if not results:
        return FinalAnalysisResponse(
            overall_tendency="분석할 데이터가 없습니다.",
            personality_analysis="",
            communication_strategy="",
            strengths=[],
            growth_areas=[],
            keyword_analysis={}
        )
    
    # 전체 평균 점수 계산
    total_score = sum(r['score'] for r in results) / len(results)
    
    # 점수 분포 분석
    t_responses = sum(1 for r in results if r['score'] < 40)
    neutral_responses = sum(1 for r in results if 40 <= r['score'] <= 60) 
    f_responses = sum(1 for r in results if r['score'] > 60)
    
    # 전체 성향 판단
    if total_score < 30:
        overall_tendency = "강한 T(사고형) 성향"
        tendency_desc = "논리적이고 객관적인 판단을 선호하는"
    elif total_score < 45:
        overall_tendency = "T(사고형) 성향"
        tendency_desc = "합리적 사고를 중시하는"
    elif total_score < 55:
        overall_tendency = "T-F 균형"
        tendency_desc = "논리와 감정의 균형이 잡힌"
    elif total_score < 70:
        overall_tendency = "F(감정형) 성향"
        tendency_desc = "감정과 관계를 중시하는"
    else:
        overall_tendency = "강한 F(감정형) 성향"
        tendency_desc = "깊은 공감과 배려심을 가진"
    
    # 성격 분석
    consistency = 100 - (max([r['score'] for r in results]) - min([r['score'] for r in results]))
    if consistency > 80:
        consistency_desc = "일관성이 매우 높고 안정된"
    elif consistency > 60:
        consistency_desc = "어느 정도 일관된"
    else:
        consistency_desc = "상황에 따라 유연하게 대응하는"
    
    personality_analysis = f"""
당신은 {tendency_desc} {consistency_desc} 성향을 보여주었습니다. 

{len(results)}개의 질문 중 T 성향 답변이 {t_responses}개, 균형적 답변이 {neutral_responses}개, F 성향 답변이 {f_responses}개로 나타났습니다. 
전체적으로 {total_score:.1f}점으로 {overall_tendency}을 나타냅니다.
    """.strip()
    
    # F 성향 상대 대응 전략 - 더 세밀한 구간과 다양한 템플릿
    import random
    
    # 다양한 템플릿 풀 정의
    communication_templates = {
        'very_t': [  # 0-20점
            f"""
F 성향 상대와의 효과적인 소통법:

🎯 **핵심 전략**: 논리적 설명 + 감정적 배려

📝 **대화 방식**:
• "객관적으로 보면 이렇습니다만, 당신의 기분은 어떠신가요?"
• "효율적인 방법은 이것이지만, 모두가 편안한 방법을 함께 찾아보죠"
• "사실 분석상으로는... 하지만 팀 분위기도 중요하니까요"

💡 **주의사항**:
• 너무 직설적인 표현보다는 부드러운 어조 사용
• 결론을 먼저 말하기보다 상대방 의견을 먼저 듣기
• "당연히", "확실히" 같은 단정적 표현 자제
            """,
            f"""
F 성향 상대와의 효과적인 소통법:

🎯 **핵심 전략**: 감정적 배려 우선 + 논리적 설명

📝 **대화 방식**:
• "우선 당신의 마음이 어떠신지 듣고 싶어요"
• "논리적으로는 맞지만, 모두가 편안한 방향을 찾아보죠"
• "객관적 사실과 함께 감정적 측면도 고려해보면 어떨까요?"

💡 **개선 포인트**:
• 감정적 공감을 먼저 표현한 후 논리적 설명 추가
• "우리 함께", "함께 생각해봐요" 같은 협력적 표현 활용
• 상대방의 감정 상태를 먼저 확인하는 습관 기르기
            """
        ],
        'strong_t': [  # 20-35점
            f"""
F 성향 상대와의 효과적인 소통법:

🎯 **핵심 전략**: 논리적 설명 + 감정적 배려

📝 **대화 방식**:
• "객관적으로 보면 이렇습니다만, 당신의 기분은 어떠신가요?"
• "효율적인 방법은 이것이지만, 모두가 편안한 방법을 함께 찾아보죠"
• "사실 분석상으로는... 하지만 팀 분위기도 중요하니까요"

💡 **주의사항**:
• 너무 직설적인 표현보다는 부드러운 어조 사용
• 결론을 먼저 말하기보다 상대방 의견을 먼저 듣기
• "당연히", "확실히" 같은 단정적 표현 자제
            """,
            f"""
F 성향 상대와의 효과적인 소통법:

🎯 **핵심 전략**: 균형잡힌 접근법

📝 **대화 방식**:
• "논리적으로는 이렇지만, 감정적으로는 어떨까요?"
• "효과적이면서도 따뜻한 방법을 함께 찾아보죠"
• "객관적 사실과 함께 감정적 측면도 고려해보면 어떨까요?"

💡 **개선 포인트**:
• 논리적 설명과 감정적 배려의 균형 유지
• 상대방의 감정을 고려한 논리적 설명 시도
• "우리 함께", "함께 생각해봐요" 같은 협력적 표현 활용
            """
        ],
        'mild_t': [  # 35-45점
            f"""
F 성향 상대와의 효과적인 소통법:

🎯 **핵심 전략**: 현재의 균형감 활용 + 감정적 표현 강화

📝 **대화 방식**:
• "논리적으로도 맞고 감정적으로도 좋은 방향은..."
• "합리적이면서도 모두가 만족할 수 있는 방법을 찾아보죠"
• "효과적이지만 따뜻한 접근 방식으로 해보면 어떨까요?"

💡 **강화 포인트**:
• 현재의 균형감은 큰 장점 - 이를 잘 활용하세요
• F 성향 상대에게는 감정적 표현을 조금 더 늘려보세요
• "우리 함께", "같이 생각해봐요" 같은 포용적 표현 활용
            """,
            f"""
F 성향 상대와의 효과적인 소통법:

🎯 **핵심 전략**: 자연스러운 균형감 활용

📝 **대화 방식**:
• "객관적 사실과 감정적 측면을 모두 고려해보면..."
• "효과적이면서도 따뜻한 방법을 함께 찾아보죠"
• "논리적으로도 맞고 감정적으로도 좋은 방향은..."

💡 **개선 포인트**:
• 현재의 균형감을 더욱 자연스럽게 활용하기
• 감정적 표현을 조금 더 강화해보세요
• "우리 함께", "함께 생각해봐요" 같은 협력적 표현 활용
            """
        ],
        'balanced': [  # 45-55점
            f"""
F 성향 상대와의 효과적인 소통법:

🎯 **핵심 전략**: 완벽한 균형감 활용

📝 **대화 방식**:
• "논리와 감정의 균형을 맞춰보면..."
• "객관적 사실과 감정적 측면을 모두 고려해보죠"
• "효과적이면서도 따뜻한 방법을 함께 찾아보면 어떨까요?"

💡 **강화 포인트**:
• 현재의 완벽한 균형감을 최대한 활용하세요
• 상황에 따라 논리적 설명과 감정적 배려를 적절히 조절
• "우리 함께", "함께 생각해봐요" 같은 협력적 표현 활용
            """,
            f"""
F 성향 상대와의 효과적인 소통법:

🎯 **핵심 전략**: 자연스러운 균형감 활용

📝 **대화 방식**:
• "객관적 사실과 감정적 측면을 모두 고려해보면..."
• "효과적이면서도 따뜻한 방법을 함께 찾아보죠"
• "논리적으로도 맞고 감정적으로도 좋은 방향은..."

💡 **개선 포인트**:
• 현재의 균형감을 더욱 자연스럽게 활용하기
• 감정적 표현을 조금 더 강화해보세요
• "우리 함께", "함께 생각해봐요" 같은 협력적 표현 활용
            """
        ],
        'mild_f': [  # 55-65점
            f"""
F 성향 상대와의 효과적인 소통법:

🎯 **핵심 전략**: 자연스러운 공감대 형성

📝 **대화 방식**:
• "마음으로 느끼기에는...", "함께 생각해보면..."
• "감정적 측면을 고려해보면...", "우리 모두가 편안한 방법은..."
• "객관적 사실과 함께 감정적 측면도 고려해보면 어떨까요?"

💡 **강화 포인트**:
• 현재의 감정적 공감 능력을 더욱 활용하세요
• 가끔 객관적 근거도 함께 제시하면 더욱 설득력 있는 소통 가능
• "우리 함께", "함께 생각해봐요" 같은 협력적 표현 활용
            """,
            f"""
F 성향 상대와의 효과적인 소통법:

🎯 **핵심 전략**: 감정적 공감 + 논리적 보완

📝 **대화 방식**:
• "감정적으로는 이해가 되는데, 객관적으로는..."
• "마음으로는 동감하지만, 사실상으로는..."
• "우리 모두가 편안한 방법을 찾아보면 어떨까요?"

💡 **개선 포인트**:
• 감정적 공감을 바탕으로 한 소통이 편안하실 것입니다
• 가끔 객관적 근거도 함께 제시하면 더욱 설득력 있는 소통 가능
• T 성향이 강한 상대방에게는 논리적 설명을 먼저 하고 감정적 배려를 더하는 방식 시도
            """
        ],
        'strong_f': [  # 65-80점
            f"""
F 성향 상대와의 효과적인 소통법:

🎯 **핵심 전략**: 자연스러운 공감대 형성

📝 **대화 방식**:
• 이미 F 성향이시므로 자연스럽게 잘 소통하고 계십니다
• "마음으로 느끼기에는...", "함께 생각해보면..." 같은 표현이 자연스럽게 나오실 거예요
• 감정적 공감을 바탕으로 한 소통이 편안하실 것입니다

💡 **추가 팁**:
• 가끔 객관적 근거도 함께 제시하면 더욱 설득력 있는 소통 가능
• T 성향이 강한 상대방에게는 논리적 설명을 먼저 하고 감정적 배려를 더하는 방식 시도
            """,
            f"""
F 성향 상대와의 효과적인 소통법:

🎯 **핵심 전략**: 완벽한 감정적 공감 능력 활용

📝 **대화 방식**:
• "마음으로 느끼기에는...", "함께 생각해보면..."
• "우리 모두가 편안한 방법을 찾아보면 어떨까요?"
• "감정적 측면을 고려해보면...", "객관적 사실과 함께..."

💡 **강화 포인트**:
• 현재의 뛰어난 감정적 공감 능력을 최대한 활용하세요
• 가끔 객관적 근거도 함께 제시하면 더욱 설득력 있는 소통 가능
• T 성향이 강한 상대방에게는 논리적 설명을 먼저 하고 감정적 배려를 더하는 방식 시도
            """
        ],
        'very_f': [  # 80-100점
            f"""
F 성향 상대와의 효과적인 소통법:

🎯 **핵심 전략**: 완벽한 감정적 공감 능력 활용

📝 **대화 방식**:
• 이미 완벽한 F 성향이시므로 자연스럽게 잘 소통하고 계십니다
• "마음으로 느끼기에는...", "함께 생각해보면..." 같은 표현이 자연스럽게 나오실 거예요
• 감정적 공감을 바탕으로 한 소통이 편안하실 것입니다

💡 **추가 팁**:
• 가끔 객관적 근거도 함께 제시하면 더욱 설득력 있는 소통 가능
• T 성향이 강한 상대방에게는 논리적 설명을 먼저 하고 감정적 배려를 더하는 방식 시도
            """,
            f"""
F 성향 상대와의 효과적인 소통법:

🎯 **핵심 전략**: 완벽한 감정적 공감 능력 활용

📝 **대화 방식**:
• "마음으로 느끼기에는...", "함께 생각해보면..."
• "우리 모두가 편안한 방법을 찾아보면 어떨까요?"
• "감정적 측면을 고려해보면...", "객관적 사실과 함께..."

💡 **강화 포인트**:
• 현재의 완벽한 감정적 공감 능력을 최대한 활용하세요
• 가끔 객관적 근거도 함께 제시하면 더욱 설득력 있는 소통 가능
• T 성향이 강한 상대방에게는 논리적 설명을 먼저 하고 감정적 배려를 더하는 방식 시도
            """
        ]
    }
    
    # 점수 구간별 템플릿 선택
    if total_score < 20:
        template_category = 'very_t'
    elif total_score < 35:
        template_category = 'strong_t'
    elif total_score < 45:
        template_category = 'mild_t'
    elif total_score < 55:
        template_category = 'balanced'
    elif total_score < 65:
        template_category = 'mild_f'
    elif total_score < 80:
        template_category = 'strong_f'
    else:
        template_category = 'very_f'
    
    # 랜덤하게 템플릿 선택
    communication_strategy = random.choice(communication_templates[template_category])
    
    # 강점 분석 - 더 세밀한 구간과 다양한 템플릿
    hashtag_candidates = {
        'very_t': [['논리', '객관', '판단'], ['효율', '일관', '체계']],
        'strong_t': [['논리', '객관', '효율'], ['판단', '일관', '체계']],
        'mild_t': [['논리', '객관'], ['균형', '융통', '효율']],
        'balanced': [['균형', '융통'], ['조화', '통합', '논리']],
        'mild_f': [['공감', '배려'], ['이해', '소통', '균형']],
        'strong_f': [['공감', '배려', '관계'], ['이해', '소통', '따뜻함']],
        'very_f': [['공감', '배려', '관계'], ['이해', '소통', '따뜻함']]
    }
    
    # 점수 구간별 해시태그 선택 (랜덤하게 선택)
    if total_score < 20:
        category = 'very_t'
    elif total_score < 35:
        category = 'strong_t'
    elif total_score < 45:
        category = 'mild_t'
    elif total_score < 55:
        category = 'balanced'
    elif total_score < 65:
        category = 'mild_f'
    elif total_score < 80:
        category = 'strong_f'
    else:
        category = 'very_f'
    
    # 랜덤하게 강점 선택
    strengths = random.choice(hashtag_candidates[category])
    
    # 성장 영역 - 더 세밀한 구간과 다양한 템플릿
    growth_templates = {
        'very_t': [
            [
                "상대방의 감정과 입장 고려하기",
                "부드럽고 따뜻한 표현 방식 연습",
                "논리적 설명과 감정적 배려의 조화",
                "상대방 의견을 먼저 듣는 습관 기르기"
            ],
            [
                "감정적 공감 능력 향상하기",
                "직설적 표현보다 부드러운 어조 사용하기",
                "상대방의 감정 상태를 먼저 확인하는 습관",
                "논리적 설명과 함께 감정적 배려 표현하기"
            ]
        ],
        'strong_t': [
            [
                "F 성향 상대와 소통할 때 감정적 표현 늘리기",
                "공감적 언어 사용 연습",
                "논리적 설명과 감정적 배려의 균형 유지",
                "상대방의 감정을 고려한 논리적 설명 시도"
            ],
            [
                "감정적 공감 능력을 조금 더 강화하기",
                "논리적 설명과 함께 감정적 측면도 고려하기",
                "상대방의 입장을 먼저 이해하는 습관",
                "효과적이면서도 따뜻한 접근 방식 연습"
            ]
        ],
        'mild_t': [
            [
                "F 성향 상대와 소통할 때 감정적 표현 늘리기",
                "공감적 언어 사용 연습",
                "현재의 균형감을 상황에 맞게 조절하기",
                "감정적 니즈에 더 민감하게 반응하기"
            ],
            [
                "감정적 표현을 조금 더 강화하기",
                "논리적 설명과 감정적 배려의 자연스러운 조화",
                "상대방의 감정적 측면을 더욱 고려하기",
                "균형감을 더욱 자연스럽게 활용하기"
            ]
        ],
        'balanced': [
            [
                "현재의 완벽한 균형감을 최대한 활용하기",
                "상황에 따라 논리적 설명과 감정적 배려를 적절히 조절",
                "감정적 표현을 조금 더 강화해보기",
                "균형감을 더욱 자연스럽게 활용하기"
            ],
            [
                "완벽한 균형감을 다양한 상황에 적용하기",
                "논리와 감정의 조화를 더욱 자연스럽게 만들기",
                "상대방의 성향에 따라 적절한 소통 방식 선택하기",
                "현재의 균형감을 더욱 효과적으로 활용하기"
            ]
        ],
        'mild_f': [
            [
                "감정적 공감 능력을 더욱 활용하기",
                "가끔 객관적 근거도 함께 제시하기",
                "T 성향 상대방과의 소통 방식 다양화",
                "논리적 설득력도 함께 강화하기"
            ],
            [
                "감정적 공감을 바탕으로 한 소통 능력 향상",
                "객관적 근거와 감정적 공감의 조화",
                "T 성향 상대방에게는 논리적 설명을 먼저 하고 감정적 배려를 더하는 방식",
                "감정적 공감과 논리적 보완의 균형"
            ]
        ],
        'strong_f': [
            [
                "감정적 판단과 함께 객관적 근거 고려하기",
                "때로는 단호한 결정도 필요함을 인식",
                "논리적 설득력 강화",
                "T 성향 상대방과의 소통 방식 다양화"
            ],
            [
                "뛰어난 감정적 공감 능력을 최대한 활용하기",
                "가끔 객관적 근거도 함께 제시하여 설득력 강화",
                "T 성향 상대방과의 효과적인 소통 방식 개발",
                "감정적 공감과 논리적 보완의 완벽한 조화"
            ]
        ],
        'very_f': [
            [
                "완벽한 감정적 공감 능력을 최대한 활용하기",
                "가끔 객관적 근거도 함께 제시하여 설득력 강화",
                "T 성향 상대방과의 효과적인 소통 방식 개발",
                "감정적 공감과 논리적 보완의 완벽한 조화"
            ],
            [
                "완벽한 감정적 공감 능력을 다양한 상황에 적용하기",
                "객관적 근거와 감정적 공감의 완벽한 조화",
                "T 성향 상대방에게는 논리적 설명을 먼저 하고 감정적 배려를 더하는 방식",
                "감정적 공감과 논리적 보완의 균형을 더욱 자연스럽게 만들기"
            ]
        ]
    }
    
    # 랜덤하게 성장 영역 선택
    growth_areas = random.choice(growth_templates[category])
    
    # 키워드 분석 - 개선된 버전
    keyword_analysis = {
        'logical_thinking': {},  # 논리적 사고
        'analytical_approach': {},  # 분석적 접근
        'emotional_empathy': {},  # 감정적 공감
        'relationship_focus': {}  # 관계 중심
    }
    
    # 카테고리별 키워드 정의 (확장된 버전 - 짧은 답변을 위한 완화된 기준)
    keyword_categories = {
        'logical_thinking': [
            # 기본 키워드
            '논리', '분석', '판단', '이성', '합리', '객관', '체계', '원리', '일관',
            # 짧은 답변용 추가 키워드
            '맞', '틀', '확실', '당연', '분명', '명확', '정확', '객관적', '논리적', '합리적',
            '사실', '증거', '근거', '이유', '원인', '결과', '방법', '해결'
        ],
        'analytical_approach': [
            # 기본 키워드  
            '효율', '성과', '전략', '계획', '목표', '데이터', '측정', '정확', '명확',
            # 짧은 답변용 추가 키워드
            '계획적', '체계적', '단계', '순서', '먼저', '우선', '중요', '핵심',
            '비교', '평가', '검토', '확인', '선택', '결정', '최적', '효과적'
        ],
        'emotional_empathy': [
            # 기본 키워드
            '감정', '느낌', '마음', '공감', '이해', '위로', '따뜻', '배려',
            # 짧은 답변용 추가 키워드  
            '좋', '싫', '기분', '행복', '슬', '힘들', '걱정', '고민',
            '미안', '고마', '사랑', '소중', '예쁘', '귀여', '재미', '즐거'
        ],
        'relationship_focus': [
            # 기본 키워드
            '관계', '소통', '협력', '조화', '사람', '인간', '도움', '지원', '격려',
            # 짧은 답변용 추가 키워드
            '함께', '같이', '서로', '우리', '친구', '가족', '동료', '팀',
            '배려', '존중', '이해', '도와', '돕', '챙기', '응원'
        ]
    }
    
    # 각 답변에서 키워드 추출 (완화된 매칭 방식)
    for r in results:
        answer_text = r['answer'].lower()  # 소문자로 변환하여 매칭 향상
        
        for category, keywords in keyword_categories.items():
            for keyword in keywords:
                matches = 0
                
                # 1. 정확한 단어 매칭 (기존 방식, 더 높은 가중치)
                pattern = r'\b' + re.escape(keyword) + r'\b'
                exact_matches = len(re.findall(pattern, answer_text, re.IGNORECASE))
                matches += exact_matches * 2  # 정확 매칭은 2배 가중치
                
                # 2. 부분 매칭 (완화된 방식, 짧은 키워드만)
                if len(keyword) <= 2 and exact_matches == 0:  # 2글자 이하 키워드만 부분매칭 허용
                    if keyword in answer_text:
                        matches += 1
                
                # 3. 어근 매칭 (동사/형용사 활용)
                if exact_matches == 0:
                    # 한국어 어근 패턴들
                    root_patterns = {
                        '좋': ['좋아', '좋은', '좋을', '좋다', '좋지', '좋네'],
                        '싫': ['싫어', '싫은', '싫다', '싫네'],
                        '맞': ['맞아', '맞는', '맞다', '맞네', '맞지'],
                        '틀': ['틀려', '틀린', '틀렸'],
                        '도와': ['도와줘', '도와주', '도움'],
                        '돕': ['도와', '도움'],
                        '함께': ['같이'],
                        '확실': ['확실히', '확실한']
                    }
                    
                    if keyword in root_patterns:
                        for variant in root_patterns[keyword]:
                            if variant in answer_text:
                                matches += 1
                                break
                    
                    # 역방향 체크 (키워드가 변형어인 경우)
                    for root, variants in root_patterns.items():
                        if keyword in variants and root in answer_text:
                            matches += 1
                            break
                
                if matches > 0:
                    if keyword not in keyword_analysis[category]:
                        keyword_analysis[category][keyword] = 0
                    keyword_analysis[category][keyword] += matches
    
    return FinalAnalysisResponse(
        overall_tendency=overall_tendency,
        personality_analysis=personality_analysis,
        communication_strategy=communication_strategy,
        strengths=strengths,
        growth_areas=growth_areas,
        keyword_analysis=keyword_analysis
    ) 